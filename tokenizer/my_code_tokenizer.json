{
  "version": "1.0",
  "truncation": null,
  "padding": null,
  "added_tokens": [
    {
      "id": 0,
      "content": "[UNK]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 1,
      "content": "[CLS]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 2,
      "content": "[SEP]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 3,
      "content": "[PAD]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 4,
      "content": "[MASK]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    }
  ],
  "normalizer": null,
  "pre_tokenizer": null,
  "post_processor": null,
  "decoder": null,
  "model": {
    "type": "BPE",
    "dropout": null,
    "unk_token": "[UNK]",
    "continuing_subword_prefix": null,
    "end_of_word_suffix": null,
    "fuse_unk": false,
    "byte_fallback": false,
    "vocab": {
      "[UNK]": 0,
      "[CLS]": 1,
      "[SEP]": 2,
      "[PAD]": 3,
      "[MASK]": 4,
      " ": 5,
      "!": 6,
      "\"": 7,
      "#": 8,
      "(": 9,
      ")": 10,
      "+": 11,
      ",": 12,
      ".": 13,
      ":": 14,
      "A": 15,
      "C": 16,
      "H": 17,
      "I": 18,
      "P": 19,
      "T": 20,
      "_": 21,
      "a": 22,
      "b": 23,
      "c": 24,
      "d": 25,
      "e": 26,
      "f": 27,
      "g": 28,
      "h": 29,
      "i": 30,
      "l": 31,
      "m": 32,
      "n": 33,
      "o": 34,
      "p": 35,
      "r": 36,
      "s": 37,
      "t": 38,
      "u": 39,
      "w": 40,
      "x": 41,
      "y": 42,
      "{": 43,
      "}": 44,
      "\"\"": 45,
      "e ": 46,
      "re": 47,
      "ou": 48,
      " a": 49,
      " t": 50,
      " re": 51,
      ". ": 52,
      ", ": 53,
      "am": 54,
      "de ": 55,
      "er": 56,
      "es": 57,
      "in": 58,
      "tu": 59,
      "\"\"\"": 60,
      " c": 61,
      " d": 62,
      " s": 63,
      "d ": 64,
      "ld ": 65,
      "rn": 66,
      "you": 67,
      "ould ": 68,
      " retu": 69,
      " return": 70,
      " A": 71,
      " f": 72,
      " you": 73,
      "# ": 74,
      "):": 75,
      "al": 76,
      "ar": 77,
      "at": 78,
      "ber": 79,
      "cl": 80,
      "dd": 81,
      "ef": 82,
      "et": 83,
      "ex": 84,
      "io": 85,
      "is": 86,
      "it": 87,
      "le ": 88,
      "mber": 89,
      "nu": 90,
      "nam": 91,
      "or": 92,
      "ode ": 93,
      "ple ": 94,
      "s t": 95,
      "th": 96,
      "ude ": 97,
      ". \"\"\"": 98,
      "ample ": 99,
      "incl": 100,
      "\"\"\" A": 101,
      " code ": 102,
      "ould incl": 103,
      " your": 104,
      "mbers": 105,
      "numbers": 106,
      "name": 107,
      "ould include ": 108,
      " +": 109,
      " b": 110,
      " g": 111,
      " o": 112,
      " w": 113,
      " ex": 114,
      " is": 115,
      " \"\"\" A": 116,
      " numbers": 117,
      "!\"": 118,
      "\"H": 119,
      "(a": 120,
      "(name": 121,
      ", t": 122,
      "Could include ": 123,
      "In": 124,
      "Py": 125,
      "Th": 126,
      "_numbers": 127,
      "ac": 128,
      "a. ": 129,
      "ain": 130,
      "be ": 131,
      "b):": 132,
      "ce": 133,
      "cs": 134,
      "ct": 135,
      "cer": 136,
      "des": 137,
      "d return": 138,
      "def": 139,
      "el": 140,
      "fr": 141,
      "f your": 142,
      "gn": 143,
      "g d": 144,
      "he ": 145,
      "hat": 146,
      "ip": 147,
      "ies": 148,
      "ign": 149,
      "lo": 150,
      "lt": 151,
      "m your": 152,
      "no": 153,
      "n. ": 154,
      "n f": 155,
      "nar": 156,
      "nct": 157,
      "nd return": 158,
      "nip": 159,
      "os": 160,
      "o numbers": 161,
      "ocs": 162,
      "om your": 163,
      "on f": 164,
      "pt": 165,
      "par": 166,
      "pet": 167,
      "pos": 168,
      "rain": 169,
      "su": 170,
      "s. \"\"\"": 171,
      "snip": 172,
      "t s": 173,
      "t o": 174,
      "uit": 175,
      "unct": 176,
      "wo numbers": 177,
      "{name": 178,
      "}!\"": 179,
      "reet": 180,
      "resu": 181,
      " a re": 182,
      " a s": 183,
      " add": 184,
      " a +": 185,
      " and return": 186,
      " that": 187,
      " train": 188,
      " repos": 189,
      ". def": 190,
      ", you": 191,
      ", or": 192,
      ", b):": 193,
      ", {name": 194,
      "er ex": 195,
      "est s": 196,
      "es, or": 197,
      "ing d": 198,
      "tual": 199,
      " could ": 200,
      " def": 201,
      " docs": 202,
      " sce": 203,
      " return f": 204,
      " return a +": 205,
      "# In": 206,
      "# Th": 207,
      "): return f": 208,
      "al sce": 209,
      "ata. ": 210,
      "dds t": 211,
      "excer": 212,
      "ion. ": 213,
      "io, you": 214,
      "is is": 215,
      "itor": 216,
      "s the ": 217,
      "thon f": 218,
      "ther ex": 219,
      ". \"\"\" return a +": 220,
      "ample Py": 221,
      "ample snip": 222,
      "\"\"\" Ano": 223,
      " code fr": 224,
      " code excer": 225,
      "ould include ac": 226,
      " greet": 227,
      " would include ac": 228,
      " \"\"\" Adds t": 229,
      "\"Hel": 230,
      "(a, b):": 231,
      "(name): return f": 232,
      ", test s": 233,
      "Could include des": 234,
      "_numbers(a, b):": 235,
      "be par": 236,
      "f your train": 237,
      "ies. def": 238,
      "ign docs": 239,
      "lo, {name": 240,
      "lt. \"\"\" return a +": 241,
      "nario, you": 242,
      "om your repos": 243,
      "pts. \"\"\"": 244,
      "pet that": 245,
      "t of your train": 246,
      "uites, or": 247,
      "unction. ": 248,
      "wo numbers and return": 249,
      "result. \"\"\" return a +": 250,
      " a real sce": 251,
      " a sample Py": 252,
      " add_numbers(a, b):": 253,
      "ing data. ": 254,
      "tual code fr": 255,
      " could be par": 256,
      " def add_numbers(a, b):": 257,
      "# In a real sce": 258,
      "# This is": 259,
      "itories. def": 260,
      "s the result. \"\"\" return a +": 261,
      "thon function. ": 262,
      "ther example snip": 263,
      "\"\"\" Another example snip": 264,
      " code excerpts. \"\"\"": 265,
      " greet(name): return f": 266,
      " would include actual code fr": 267,
      " \"\"\" Adds two numbers and return": 268,
      "\"Hello, {name": 269,
      ", test suites, or": 270,
      "Could include design docs": 271,
      "nario, you would include actual code fr": 272,
      "om your repositories. def": 273,
      "pet that could be par": 274,
      "t of your training data. ": 275,
      " a sample Python function. ": 276,
      " def add_numbers(a, b): \"\"\" Adds two numbers and return": 277,
      "# In a real scenario, you would include actual code fr": 278,
      "# This is a sample Python function. ": 279,
      "s the result. \"\"\" return a + b": 280,
      "\"\"\" Another example snippet that could be par": 281,
      " code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return": 282,
      " greet(name): return f\"Hello, {name": 283,
      ", test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return": 284,
      "Could include design docs, test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return": 285,
      "om your repositories. def greet(name): return f\"Hello, {name": 286,
      "t of your training data. Could include design docs, test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return": 287,
      "# In a real scenario, you would include actual code from your repositories. def greet(name): return f\"Hello, {name": 288,
      "# This is a sample Python function. # In a real scenario, you would include actual code from your repositories. def greet(name): return f\"Hello, {name": 289,
      "\"\"\" Another example snippet that could be part of your training data. Could include design docs, test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return": 290,
      "# This is a sample Python function. # In a real scenario, you would include actual code from your repositories. def greet(name): return f\"Hello, {name}!\"": 291,
      "\"\"\" Another example snippet that could be part of your training data. Could include design docs, test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and returns the result. \"\"\" return a + b": 292
    },
    "merges": [
      "\" \"",
      "e  ",
      "r e",
      "o u",
      "  a",
      "  t",
      "  re",
      ".  ",
      ",  ",
      "a m",
      "d e ",
      "e r",
      "e s",
      "i n",
      "t u",
      "\"\" \"",
      "  c",
      "  d",
      "  s",
      "d  ",
      "l d ",
      "r n",
      "y ou",
      "ou ld ",
      " re tu",
      " retu rn",
      "  A",
      "  f",
      "  you",
      "#  ",
      ") :",
      "a l",
      "a r",
      "a t",
      "b er",
      "c l",
      "d d",
      "e f",
      "e t",
      "e x",
      "i o",
      "i s",
      "i t",
      "l e ",
      "m ber",
      "n u",
      "n am",
      "o r",
      "o de ",
      "p le ",
      "s  t",
      "t h",
      "u de ",
      ".  \"\"\"",
      "am ple ",
      "in cl",
      "\"\"\"  A",
      " c ode ",
      "ould  incl",
      " you r",
      "mber s",
      "nu mbers",
      "nam e",
      "ould incl ude ",
      "  +",
      "  b",
      "  g",
      "  o",
      "  w",
      "  ex",
      "  is",
      "  \"\"\" A",
      "  numbers",
      "! \"",
      "\" H",
      "( a",
      "( name",
      ",  t",
      "C ould include ",
      "I n",
      "P y",
      "T h",
      "_ numbers",
      "a c",
      "a . ",
      "a in",
      "b e ",
      "b ):",
      "c e",
      "c s",
      "c t",
      "c er",
      "d es",
      "d  return",
      "d ef",
      "e l",
      "f r",
      "f  your",
      "g n",
      "g  d",
      "h e ",
      "h at",
      "i p",
      "i es",
      "i gn",
      "l o",
      "l t",
      "m  your",
      "n o",
      "n . ",
      "n  f",
      "n ar",
      "n ct",
      "n d return",
      "n ip",
      "o s",
      "o  numbers",
      "o cs",
      "o m your",
      "o n f",
      "p t",
      "p ar",
      "p et",
      "p os",
      "r ain",
      "s u",
      "s . \"\"\"",
      "s nip",
      "t  s",
      "t  o",
      "u it",
      "u nct",
      "w o numbers",
      "{ name",
      "} !\"",
      "re et",
      "re su",
      " a  re",
      " a  s",
      " a dd",
      " a  +",
      " a nd return",
      " t hat",
      " t rain",
      " re pos",
      ".  def",
      ",  you",
      ",  or",
      ",  b):",
      ",  {name",
      "er  ex",
      "es t s",
      "es , or",
      "in g d",
      "tu al",
      " c ould ",
      " d ef",
      " d ocs",
      " s ce",
      " return  f",
      " return  a +",
      "#  In",
      "#  Th",
      "):  return f",
      "al  sce",
      "at a. ",
      "dd s t",
      "ex cer",
      "io n. ",
      "io , you",
      "is  is",
      "it or",
      "s t he ",
      "th on f",
      "th er ex",
      ". \"\"\"  return a +",
      "ample  Py",
      "ample  snip",
      "\"\"\" A no",
      " code  fr",
      " code  excer",
      "ould include  ac",
      " g reet",
      " w ould include ac",
      " \"\"\" A dds t",
      "\"H el",
      "(a , b):",
      "(name ): return f",
      ", t est s",
      "Could include  des",
      "_numbers (a, b):",
      "be  par",
      "f your  train",
      "ies . def",
      "ign  docs",
      "lo , {name",
      "lt . \"\"\" return a +",
      "nar io, you",
      "om your  repos",
      "pt s. \"\"\"",
      "pet  that",
      "t o f your train",
      "uit es, or",
      "unct ion. ",
      "wo numbers  and return",
      "resu lt. \"\"\" return a +",
      " a re al sce",
      " a s ample Py",
      " add _numbers(a, b):",
      "ing d ata. ",
      "tual  code fr",
      " could  be par",
      " def  add_numbers(a, b):",
      "# In  a real sce",
      "# Th is is",
      "itor ies. def",
      "s the  result. \"\"\" return a +",
      "thon f unction. ",
      "ther ex ample snip",
      "\"\"\" Ano ther example snip",
      " code excer pts. \"\"\"",
      " greet (name): return f",
      " would include ac tual code fr",
      " \"\"\" Adds t wo numbers and return",
      "\"Hel lo, {name",
      ", test s uites, or",
      "Could include des ign docs",
      "nario, you  would include actual code fr",
      "om your repos itories. def",
      "pet that  could be par",
      "t of your train ing data. ",
      " a sample Py thon function. ",
      " def add_numbers(a, b):  \"\"\" Adds two numbers and return",
      "# In a real sce nario, you would include actual code fr",
      "# This is  a sample Python function. ",
      "s the result. \"\"\" return a +  b",
      "\"\"\" Another example snip pet that could be par",
      " code excerpts. \"\"\"  def add_numbers(a, b): \"\"\" Adds two numbers and return",
      " greet(name): return f \"Hello, {name",
      ", test suites, or  code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return",
      "Could include design docs , test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return",
      "om your repositories. def  greet(name): return f\"Hello, {name",
      "t of your training data.  Could include design docs, test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return",
      "# In a real scenario, you would include actual code fr om your repositories. def greet(name): return f\"Hello, {name",
      "# This is a sample Python function.  # In a real scenario, you would include actual code from your repositories. def greet(name): return f\"Hello, {name",
      "\"\"\" Another example snippet that could be par t of your training data. Could include design docs, test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return",
      "# This is a sample Python function. # In a real scenario, you would include actual code from your repositories. def greet(name): return f\"Hello, {name }!\"",
      "\"\"\" Another example snippet that could be part of your training data. Could include design docs, test suites, or code excerpts. \"\"\" def add_numbers(a, b): \"\"\" Adds two numbers and return s the result. \"\"\" return a + b"
    ]
  }
}